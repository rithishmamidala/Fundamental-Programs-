An avid hiker keeps meticulous records of their hikes. During the last hike that took exactly  steps, for every step it was noted if it was an uphill, , or a downhill,  step. Hikes always start and end at sea level, and each step up or down represents a  unit change in altitude. We define the following terms:

A mountain is a sequence of consecutive steps above sea level, starting with a step up from sea level and ending with a step down to sea level.
A valley is a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level.
Given the sequence of up and down steps during a hike, find and print the number of valleys walked through.

Example

 

The hiker first enters a valley  units deep. Then they climb out and up onto a mountain  units high. Finally, the hiker returns to sea level and ends the hike.

Function Description

Complete the countingValleys function in the editor below.

countingValleys has the following parameter(s):

int steps: the number of steps on the hike
string path: a string describing the path
Returns

int: the number of valleys traversed
Input Format

The first line contains an integer , the number of steps in the hike.
The second line contains a single string , of  characters that describe the path.
Sample Input

8
UDDDUDUU
Sample Output

1
Explanation

If we represent _ as sea level, a step up as /, and a step down as \, the hike can be drawn as:

_/\      _
   \    /
    \/\/
The hiker enters and leaves one valley.

Code:
def countingValleys(steps, path):
    # Write your code here
    up = 0
    do = 0 
    h = 0
    l = 0
    c = 0
    for i in path:
        if(up == 0 and do == 0):
            if(i == "U"):
                up +=1
                h+=1
            else:
                do += 1 
                l+=1
        else:
                  
            if(up == 1):
                if(i == "U"):
                    h+=1
                else:
                    h -=1
                if(h==0):
                    up = 0 
            else:
                if(i=="D"):
                    l+=1
                else:
                    l -=1
                if(l==0):
                    do = 0
                    c+=1
    return c
